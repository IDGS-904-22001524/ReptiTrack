<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/components/Dht22SensorCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/components/Dht22SensorCard.kt" />
              <option name="originalContent" value="package com.waldoz_x.reptitrack.ui.components&#10;&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.painter.Painter&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.waldoz_x.reptitrack.R&#10;&#10;// Helper function to get health color (copied from TerrariumDetailScreen for self-containment)&#10;@Composable&#10;fun getHealthColor(value: Float?, sensorType: String): Color {&#10;    if (value == null) return Color.LightGray.copy(alpha = 0.6f)&#10;&#10;    return when (sensorType) {&#10;        &quot;temperature&quot; -&gt; {&#10;            when {&#10;                value &lt; 20.0f -&gt; Color(0xFFADD8E6) // Light Blue (Cold)&#10;                value &gt; 30.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Hot)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        &quot;humidity&quot; -&gt; {&#10;            when {&#10;                value &lt; 50.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Dry)&#10;                value &gt; 80.0f -&gt; Color(0xFFADD8E6) // Light Blue (Humid)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        else -&gt; Color.White // Default&#10;    }&#10;}&#10;&#10;// Helper function to get sensor icons (copied from TerrariumDetailScreen for self-containment)&#10;@Composable&#10;fun getSensorIcon(sensorType: String): Painter {&#10;    return when (sensorType) {&#10;        &quot;temperature&quot; -&gt; painterResource(id = R.drawable.ic_baseline_thermostat_24)&#10;        &quot;humidity&quot; -&gt; painterResource(id = R.drawable.ic_outline_humidity_high_24)&#10;        else -&gt; painterResource(id = R.drawable.ic_baseline_cloud_24) // Generic placeholder&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Dht22SensorCard(sensorNumber: Int, sensorData: Map&lt;String, String&gt;) {&#10;    val tempKey = &quot;dht22_${sensorNumber}_temperature&quot;&#10;    val humKey = &quot;dht22_${sensorNumber}_humidity&quot;&#10;    val temperatureValue = sensorData[tempKey]?.replace(&quot;°C&quot;, &quot;&quot;)?.toFloatOrNull()&#10;    val humidityValue = sensorData[humKey]?.replace(&quot;%&quot;, &quot;&quot;)?.toFloatOrNull()&#10;&#10;    val temperatureText = sensorData[tempKey] ?: &quot;N/A&quot;&#10;    val humidityText = sensorData[humKey] ?: &quot;N/A&quot;&#10;&#10;    val tempColor = getHealthColor(temperatureValue, &quot;temperature&quot;)&#10;    val humColor = getHealthColor(humidityValue, &quot;humidity&quot;)&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .width(180.dp)&#10;            .height(160.dp)&#10;            .padding(8.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        elevation = CardDefaults.cardElevation(4.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color(0xFF607D8B).copy(alpha = 0.7f))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = &quot;DHT22 Sensor $sensorNumber&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    painter = getSensorIcon(&quot;temperature&quot;),&#10;                    contentDescription = &quot;Temperatura&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = temperatureText,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = tempColor&#10;                )&#10;                if (temperatureValue != null) {&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Canvas(modifier = Modifier.size(8.dp), onDraw = {&#10;                        drawCircle(color = tempColor)&#10;                    })&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    painter = getSensorIcon(&quot;humidity&quot;),&#10;                    contentDescription = &quot;Humedad&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = humidityText,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = humColor&#10;                )&#10;                if (humidityValue != null) {&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Canvas(modifier = Modifier.size(8.dp), onDraw = {&#10;                        drawCircle(color = humColor)&#10;                    })&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.waldoz_x.reptitrack.ui.components&#10;&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.painter.Painter&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.waldoz_x.reptitrack.R&#10;import com.waldoz_x.reptitrack.ui.components.sensorUtils.getHealthColor&#10;import com.waldoz_x.reptitrack.ui.components.sensorUtils.getSensorIcon&#10;&#10;@Composable&#10;fun Dht22SensorCard(sensorNumber: Int, sensorData: Map&lt;String, String&gt;) {&#10;    val tempKey = &quot;dht22_${sensorNumber}_temperature&quot;&#10;    val humKey = &quot;dht22_${sensorNumber}_humidity&quot;&#10;    val temperatureValue = sensorData[tempKey]?.replace(&quot;°C&quot;, &quot;&quot;)?.toFloatOrNull()&#10;    val humidityValue = sensorData[humKey]?.replace(&quot;%&quot;, &quot;&quot;)?.toFloatOrNull()&#10;&#10;    val temperatureText = sensorData[tempKey] ?: &quot;N/A&quot;&#10;    val humidityText = sensorData[humKey] ?: &quot;N/A&quot;&#10;&#10;    val tempColor = getHealthColor(temperatureValue, &quot;temperature&quot;)&#10;    val humColor = getHealthColor(humidityValue, &quot;humidity&quot;)&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .width(180.dp)&#10;            .height(160.dp)&#10;            .padding(8.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        elevation = CardDefaults.cardElevation(4.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color(0xFF607D8B).copy(alpha = 0.7f))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = &quot;DHT22 Sensor $sensorNumber&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    painter = getSensorIcon(&quot;temperature&quot;),&#10;                    contentDescription = &quot;Temperatura&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = temperatureText,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = tempColor&#10;                )&#10;                if (temperatureValue != null) {&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Canvas(modifier = Modifier.size(8.dp), onDraw = {&#10;                        drawCircle(color = tempColor)&#10;                    })&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    painter = getSensorIcon(&quot;humidity&quot;),&#10;                    contentDescription = &quot;Humedad&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = humidityText,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = humColor&#10;                )&#10;                if (humidityValue != null) {&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Canvas(modifier = Modifier.size(8.dp), onDraw = {&#10;                        drawCircle(color = humColor)&#10;                    })&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/components/TerrariumCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/components/TerrariumCard.kt" />
              <option name="originalContent" value="package com.waldoz_x.reptitrack.ui.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.input.pointer.PointerIcon&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview // Important for @Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.waldoz_x.reptitrack.domain.model.Terrarium&#10;import com.waldoz_x.reptitrack.R // Ensure R is available for drawables&#10;&#10;// Composable to display a compact visual card of a terrarium.&#10;// Composable para mostrar una tarjeta visual compacta de un terrario.&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TerrariumCard(&#10;    terrarium: Terrarium,&#10;    modifier: Modifier = Modifier,&#10;    onClick: (String) -&gt; Unit // Callback for when the card is clicked&#10;) {&#10;    // Determine card background color: dark with transparency&#10;    // Determina el color de fondo de la tarjeta: oscuro con transparencia&#10;    val cardBackgroundColor = Color.Black.copy(alpha = 0.7f) // Adjusted alpha for more darkness (was 0.5f)&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .width(180.dp) // Fixed width for two columns layout&#10;            .padding(8.dp) // Reduced outer padding&#10;            .clickable { onClick(terrarium.id) }, // Makes the card clickable&#10;        elevation = CardDefaults.cardElevation(4.dp),&#10;        shape = RoundedCornerShape(16.dp), // Rounded corners&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = cardBackgroundColor // Fixed dark transparent background&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp), // Reduced inner padding&#10;            horizontalAlignment = Alignment.CenterHorizontally // Centers content horizontally&#10;        ) {&#10;            // Terrarium image&#10;            // Imagen del terrario&#10;            Image(&#10;                painter = painterResource(id = R.drawable.terrario),&#10;                contentDescription = &quot;Imagen del terrario ${terrarium.name}&quot;,&#10;                modifier = Modifier&#10;                    .size(80.dp) // Smaller image size&#10;                    .clip(RoundedCornerShape(8.dp)) // Rounded corners&#10;                    .background(Color.DarkGray.copy(alpha = 0.8f)), // Slightly lighter dark background for image, adjusted alpha for more darkness&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Terrarium name - fixed color (e.g., white or light gray)&#10;            // Nombre del terrario - color fijo (ej. blanco o gris claro)&#10;            Text(&#10;                text = terrarium.name,&#10;                style = MaterialTheme.typography.titleMedium, // Medium title size&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White, // Fixed white color for the name&#10;                maxLines = 1, // Limit to one line for small cards&#10;                overflow = TextOverflow.Ellipsis // Add ellipsis if text is too long&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            // DHT22 readings (Temperature and Humidity)&#10;            // Lecturas del DHT22 (Temperatura y Humedad)&#10;            val tempDHT = terrarium.dht22_1_temperature&#10;            val humDHT = terrarium.dht22_1_humidity&#10;&#10;            // Function to get color based on temperature&#10;            // Función para obtener el color basado en la temperatura&#10;            fun getTemperatureColor(temp: Float?): Color {&#10;                return when (temp) {&#10;                    null -&gt; Color.Gray // N/A color&#10;                    in 0f..17f -&gt; Color(0xFF2196F3) // Blue for very cold&#10;                    in 17.1f..22f -&gt; Color(0xFF03A9F4) // Lighter blue for cold&#10;                    in 22.1f..27f -&gt; Color(0xFF8BC34A) // Green for ideal/normal&#10;                    in 27.1f..32f -&gt; Color(0xFFFFC107) // Orange for warm&#10;                    else -&gt; Color(0xFFF44336) // Red for hot&#10;                }&#10;            }&#10;&#10;            // Function to get color based on humidity&#10;            // Función para obtener el color basado en la humedad&#10;            fun getHumidityColor(humidity: Float?): Color {&#10;                return when (humidity) {&#10;                    null -&gt; Color.Gray // N/A color&#10;                    in 0f..30f -&gt; Color(0xFFEF5350) // Red for very dry&#10;                    in 30.1f..50f -&gt; Color(0xFFFF9800) // Orange for dry&#10;                    in 50.1f..70f -&gt; Color(0xFF4CAF50) // Green for ideal&#10;                    else -&gt; Color(0xFF2196F3) // Blue for high humidity&#10;                }&#10;            }&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Temperature&#10;                // Temperatura&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_temperatura), // More appropriate icon&#10;                    contentDescription = &quot;DHT22 Temperature&quot;,&#10;                    tint = getTemperatureColor(tempDHT), // Dynamic color&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = tempDHT?.let { &quot;${String.format(&quot;%.1f&quot;, it)}°C&quot; } ?: &quot;N/A&quot;, // Show N/A if null&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = getTemperatureColor(tempDHT), // Dynamic color&#10;                    fontWeight = FontWeight.Bold // Make sensor readings bold&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                // Humidity&#10;                // Humedad&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_humedad), // More appropriate icon&#10;                    contentDescription = &quot;DHT22 Humidity&quot;,&#10;                    tint = getHumidityColor(humDHT), // Dynamic color&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = humDHT?.let { &quot;${String.format(&quot;%.1f&quot;, it)}%&quot; } ?: &quot;N/A&quot;, // Show N/A if null&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = getHumidityColor(humDHT), // Dynamic color&#10;                    fontWeight = FontWeight.Bold // Make sensor readings bold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;// --- PREVIEW SECTION ---&#10;// Sección de previsualización&#10;@Preview(showBackground = true, name = &quot;Small Terrarium Card&quot;)&#10;@Composable&#10;fun PreviewSmallTerrariumCard() {&#10;    // Example data for the small card preview&#10;    // Datos de ejemplo para la previsualización de la tarjeta pequeña&#10;    val sampleTerrariumSmallNormal = Terrarium(&#10;        id = &quot;ter_small_001&quot;,&#10;        name = &quot;Iguana Terrarium&quot;, // Changed name for example&#10;        description = &quot;Un terrario de ejemplo para previsualización.&quot;,&#10;        imageResId = R.drawable.terrario,&#10;        dht22_1_temperature = 25.0f, // Normal temp (green)&#10;        dht22_1_humidity = 60.5f // Normal humidity (green)&#10;    )&#10;&#10;    val sampleTerrariumSmallHighTemp = Terrarium(&#10;        id = &quot;ter_small_003&quot;,&#10;        name = &quot;Gecko Hotbox&quot;, // Changed name for example&#10;        description = &quot;Terrarium with high temperature.&quot;,&#10;        imageResId = R.drawable.terrario, // Use the terrario image&#10;        dht22_1_temperature = 35.5f, // High temp (red)&#10;        dht22_1_humidity = 40.0f // Dry humidity (orange)&#10;    )&#10;&#10;    val sampleTerrariumSmallLowTemp = Terrarium(&#10;        id = &quot;ter_small_004&quot;,&#10;        name = &quot;Chameleon Den&quot;, // Changed name for example&#10;        description = &quot;Terrarium with low temperature.&quot;,&#10;        imageResId = R.drawable.terrario, // Use the terrario image&#10;        dht22_1_temperature = 15.0f, // Low temp (blue)&#10;        dht22_1_humidity = 80.0f // High humidity (blue)&#10;    )&#10;&#10;    val sampleTerrariumSmallNoData = Terrarium(&#10;        id = &quot;ter_small_002&quot;,&#10;        name = &quot;Empty Enclosure&quot;, // Changed name for example&#10;        description = &quot;Terrarium with no sensor data.&quot;,&#10;        imageResId = R.drawable.terrario, // Use the terrario image&#10;        dht22_1_temperature = null,&#10;        dht22_1_humidity = null&#10;    )&#10;&#10;    MaterialTheme {&#10;        // Set a dark background for the preview to better visualize transparency&#10;        // Establece un fondo oscuro para la previsualización para visualizar mejor la transparencia&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.DarkGray) // Simulate your dark background&#10;                .padding(16.dp)&#10;        ) {&#10;            TerrariumCard(terrarium = sampleTerrariumSmallNormal, onClick = { terrariumId -&gt;&#10;                println(&quot;Normal terrarium clicked: $terrariumId&quot;)&#10;            })&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TerrariumCard(terrarium = sampleTerrariumSmallHighTemp, onClick = { terrariumId -&gt;&#10;                println(&quot;Hot terrarium clicked: $terrariumId&quot;)&#10;            })&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TerrariumCard(terrarium = sampleTerrariumSmallLowTemp, onClick = { terrariumId -&gt;&#10;                println(&quot;Cold terrarium clicked: $terrariumId&quot;)&#10;            })&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TerrariumCard(terrarium = sampleTerrariumSmallNoData, onClick = { terrariumId -&gt;&#10;                println(&quot;Empty terrarium clicked: $terrariumId&quot;)&#10;            })&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.waldoz_x.reptitrack.ui.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.input.pointer.PointerIcon&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview // Important for @Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.waldoz_x.reptitrack.domain.model.Terrarium&#10;import com.waldoz_x.reptitrack.R // Ensure R is available for drawables&#10;&#10;// Composable to display a compact visual card of a terrarium.&#10;// Composable para mostrar una tarjeta visual compacta de un terrario.&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TerrariumCard(&#10;    terrarium: Terrarium,&#10;    modifier: Modifier = Modifier,&#10;    onClick: (String) -&gt; Unit // Callback for when the card is clicked&#10;) {&#10;    // Determine card background color: dark with transparency&#10;    // Determina el color de fondo de la tarjeta: oscuro con transparencia&#10;    val cardBackgroundColor = Color.Black.copy(alpha = 0.7f) // Adjusted alpha for more darkness (was 0.5f)&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .width(180.dp) // Fixed width for two columns layout&#10;            .padding(8.dp) // Reduced outer padding&#10;            .clickable { onClick(terrarium.id) }, // Makes the card clickable&#10;        elevation = CardDefaults.cardElevation(4.dp),&#10;        shape = RoundedCornerShape(16.dp), // Rounded corners&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = cardBackgroundColor // Fixed dark transparent background&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp), // Reduced inner padding&#10;            horizontalAlignment = Alignment.CenterHorizontally // Centers content horizontally&#10;        ) {&#10;            // Terrarium image&#10;            // Imagen del terrario&#10;            Image(&#10;                painter = painterResource(id = R.drawable.terrario),&#10;                contentDescription = &quot;Imagen del terrario ${terrarium.name}&quot;,&#10;                modifier = Modifier&#10;                    .size(80.dp) // Smaller image size&#10;                    .clip(RoundedCornerShape(8.dp)) // Rounded corners&#10;                    .background(Color.DarkGray.copy(alpha = 0.8f)), // Slightly lighter dark background for image, adjusted alpha for more darkness&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Terrarium name - fixed color (e.g., white or light gray)&#10;            // Nombre del terrario - color fijo (ej. blanco o gris claro)&#10;            Text(&#10;                text = terrarium.name,&#10;                style = MaterialTheme.typography.titleMedium, // Medium title size&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White, // Fixed white color for the name&#10;                maxLines = 1, // Limit to one line for small cards&#10;                overflow = TextOverflow.Ellipsis // Add ellipsis if text is too long&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            // DHT22 readings (Temperature and Humidity)&#10;            // Lecturas del DHT22 (Temperatura y Humedad)&#10;            val tempDHT = terrarium.dht22_1_temperature&#10;            val humDHT = terrarium.dht22_1_humidity&#10;&#10;            // Function to get color based on temperature&#10;            // Función para obtener el color basado en la temperatura&#10;            fun getTemperatureColor(temp: Float?): Color {&#10;                return when (temp) {&#10;                    null -&gt; Color.Gray // N/A color&#10;                    in 0f..17f -&gt; Color(0xFF2196F3) // Blue for very cold&#10;                    in 17.1f..22f -&gt; Color(0xFF03A9F4) // Lighter blue for cold&#10;                    in 22.1f..27f -&gt; Color(0xFF8BC34A) // Green for ideal/normal&#10;                    in 27.1f..32f -&gt; Color(0xFFFFC107) // Orange for warm&#10;                    else -&gt; Color(0xFFF44336) // Red for hot&#10;                }&#10;            }&#10;&#10;            // Function to get color based on humidity&#10;            // Función para obtener el color basado en la humedad&#10;            fun getHumidityColor(humidity: Float?): Color {&#10;                return when (humidity) {&#10;                    null -&gt; Color.Gray // N/A color&#10;                    in 0f..30f -&gt; Color(0xFFEF5350) // Red for very dry&#10;                    in 30.1f..50f -&gt; Color(0xFFFF9800) // Orange for dry&#10;                    in 50.1f..70f -&gt; Color(0xFF4CAF50) // Green for ideal&#10;                    else -&gt; Color(0xFF2196F3) // Blue for high humidity&#10;                }&#10;            }&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Temperature&#10;                // Temperatura&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_temperatura), // More appropriate icon&#10;                    contentDescription = &quot;DHT22 Temperature&quot;,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = tempDHT?.let { &quot;${String.format(&quot;%.1f&quot;, it)}°C&quot; } ?: &quot;N/A&quot;, // Show N/A if null&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = getTemperatureColor(tempDHT), // Dynamic color&#10;                    fontWeight = FontWeight.Bold // Make sensor readings bold&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                // Humidity&#10;                // Humedad&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_humedad), // More appropriate icon&#10;                    contentDescription = &quot;DHT22 Humidity&quot;,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = humDHT?.let { &quot;${String.format(&quot;%.1f&quot;, it)}%&quot; } ?: &quot;N/A&quot;, // Show N/A if null&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = getHumidityColor(humDHT), // Dynamic color&#10;                    fontWeight = FontWeight.Bold // Make sensor readings bold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;// --- PREVIEW SECTION ---&#10;// Sección de previsualización&#10;@Preview(showBackground = true, name = &quot;Small Terrarium Card&quot;)&#10;@Composable&#10;fun PreviewSmallTerrariumCard() {&#10;    // Example data for the small card preview&#10;    // Datos de ejemplo para la previsualización de la tarjeta pequeña&#10;    val sampleTerrariumSmallNormal = Terrarium(&#10;        id = &quot;ter_small_001&quot;,&#10;        name = &quot;Iguana Terrarium&quot;, // Changed name for example&#10;        description = &quot;Un terrario de ejemplo para previsualización.&quot;,&#10;        imageResId = R.drawable.terrario,&#10;        dht22_1_temperature = 25.0f, // Normal temp (green)&#10;        dht22_1_humidity = 60.5f // Normal humidity (green)&#10;    )&#10;&#10;    val sampleTerrariumSmallHighTemp = Terrarium(&#10;        id = &quot;ter_small_003&quot;,&#10;        name = &quot;Gecko Hotbox&quot;, // Changed name for example&#10;        description = &quot;Terrarium with high temperature.&quot;,&#10;        imageResId = R.drawable.terrario, // Use the terrario image&#10;        dht22_1_temperature = 35.5f, // High temp (red)&#10;        dht22_1_humidity = 40.0f // Dry humidity (orange)&#10;    )&#10;&#10;    val sampleTerrariumSmallLowTemp = Terrarium(&#10;        id = &quot;ter_small_004&quot;,&#10;        name = &quot;Chameleon Den&quot;, // Changed name for example&#10;        description = &quot;Terrarium with low temperature.&quot;,&#10;        imageResId = R.drawable.terrario, // Use the terrario image&#10;        dht22_1_temperature = 15.0f, // Low temp (blue)&#10;        dht22_1_humidity = 80.0f // High humidity (blue)&#10;    )&#10;&#10;    val sampleTerrariumSmallNoData = Terrarium(&#10;        id = &quot;ter_small_002&quot;,&#10;        name = &quot;Empty Enclosure&quot;, // Changed name for example&#10;        description = &quot;Terrarium with no sensor data.&quot;,&#10;        imageResId = R.drawable.terrario, // Use the terrario image&#10;        dht22_1_temperature = null,&#10;        dht22_1_humidity = null&#10;    )&#10;&#10;    MaterialTheme {&#10;        // Set a dark background for the preview to better visualize transparency&#10;        // Establece un fondo oscuro para la previsualización para visualizar mejor la transparencia&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.DarkGray) // Simulate your dark background&#10;                .padding(16.dp)&#10;        ) {&#10;            TerrariumCard(terrarium = sampleTerrariumSmallNormal, onClick = { terrariumId -&gt;&#10;                println(&quot;Normal terrarium clicked: $terrariumId&quot;)&#10;            })&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TerrariumCard(terrarium = sampleTerrariumSmallHighTemp, onClick = { terrariumId -&gt;&#10;                println(&quot;Hot terrarium clicked: $terrariumId&quot;)&#10;            })&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TerrariumCard(terrarium = sampleTerrariumSmallLowTemp, onClick = { terrariumId -&gt;&#10;                println(&quot;Cold terrarium clicked: $terrariumId&quot;)&#10;            })&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TerrariumCard(terrarium = sampleTerrariumSmallNoData, onClick = { terrariumId -&gt;&#10;                println(&quot;Empty terrarium clicked: $terrariumId&quot;)&#10;            })&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/components/sensorUtils/getHealthColor.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/components/sensorUtils/getHealthColor.kt" />
              <option name="originalContent" value="package com.waldoz_x.reptitrack.ui.components.sensorUtils&#10;&#10;" />
              <option name="updatedContent" value="package com.waldoz_x.reptitrack.ui.components.sensorUtils&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;fun getHealthColor(value: Float?, sensorType: String): Color {&#10;    if (value == null) return Color.LightGray.copy(alpha = 0.6f)&#10;    return when (sensorType) {&#10;        &quot;temperature&quot; -&gt; when {&#10;            value &lt; 20.0f -&gt; Color(0xFFADD8E6) // Light Blue (Cold)&#10;            value &gt; 30.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Hot)&#10;            else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;        }&#10;        &quot;humidity&quot; -&gt; when {&#10;            value &lt; 50.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Dry)&#10;            value &gt; 80.0f -&gt; Color(0xFFADD8E6) // Light Blue (Humid)&#10;            else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;        }&#10;        &quot;distance&quot; -&gt; when {&#10;            value &lt; 10.0f -&gt; Color(0xFFFFA07A) // Too close&#10;            value &gt; 50.0f -&gt; Color(0xFFADD8E6) // Too far&#10;            else -&gt; Color(0xFF90EE90) // Normal&#10;        }&#10;        &quot;power&quot; -&gt; when {&#10;            value &gt; 100.0f -&gt; Color(0xFFFFA07A) // High power&#10;            else -&gt; Color(0xFF90EE90) // Normal&#10;        }&#10;        else -&gt; Color.White&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/components/sensorUtils/getSensorIcon.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/components/sensorUtils/getSensorIcon.kt" />
              <option name="originalContent" value="package com.waldoz_x.reptitrack.ui.components.sensorUtils&#10;&#10;" />
              <option name="updatedContent" value="package com.waldoz_x.reptitrack.ui.components.sensorUtils&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.painter.Painter&#10;import androidx.compose.ui.res.painterResource&#10;import com.waldoz_x.reptitrack.R&#10;&#10;@Composable&#10;fun getSensorIcon(sensorType: String): Painter {&#10;    return when (sensorType) {&#10;        &quot;temperature&quot; -&gt; painterResource(id = R.drawable.ic_baseline_thermostat_24)&#10;        &quot;humidity&quot; -&gt; painterResource(id = R.drawable.ic_outline_humidity_high_24)&#10;        &quot;distance&quot; -&gt; painterResource(id = R.drawable.ic_outline_distance_24)&#10;        &quot;power&quot; -&gt; painterResource(id = R.drawable.ic_outline_settings_power_24)&#10;        else -&gt; painterResource(id = R.drawable.ic_baseline_cloud_24)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/screens/terrariumdetail/TerrariumDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/waldoz_x/reptitrack/ui/screens/terrariumdetail/TerrariumDetailScreen.kt" />
              <option name="originalContent" value="package com.waldoz_x.reptitrack.ui.screens.terrariumdetail&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.waldoz_x.reptitrack.ui.theme.ReptiTrackTheme&#10;import com.waldoz_x.reptitrack.domain.model.Terrarium&#10;import java.util.Locale&#10;import java.time.LocalTime // Import LocalTime&#10;import java.time.temporal.ChronoUnit // Import ChronoUnit&#10;import kotlinx.coroutines.delay // Import delay for LaunchedEffect&#10;import androidx.compose.runtime.LaunchedEffect // Import LaunchedEffect&#10;&#10;// Imports for using Painter and painterResource&#10;import androidx.compose.ui.graphics.painter.Painter&#10;import androidx.compose.ui.res.painterResource&#10;import com.waldoz_x.reptitrack.R // Make sure to import your R class to access drawables&#10;&#10;// Import for loading images asynchronously (Coil) - Not directly used for background images now, but kept for future use if needed&#10;import coil.compose.AsyncImage&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.layout.ExperimentalLayoutApi&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.foundation.BorderStroke // Import BorderStroke&#10;import androidx.compose.animation.animateColorAsState // Import animateColorAsState&#10;import androidx.compose.foundation.Canvas // Import Canvas for drawing circles&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.animation.core.animateDpAsState&#10;import androidx.compose.foundation.border&#10;import androidx.compose.ui.draw.shadow&#10;import com.waldoz_x.reptitrack.ui.components.Dht22SensorGroupCard&#10;import com.waldoz_x.reptitrack.ui.components.Ds18b20SensorGroupCard&#10;import com.waldoz_x.reptitrack.ui.components.OtherSensorsGroupCard&#10;import com.waldoz_x.reptitrack.ui.components.ActuatorControlCard&#10;import com.waldoz_x.reptitrack.ui.components.FoodDispenserCard&#10;import com.waldoz_x.reptitrack.ui.components.RainSystemCard&#10;&#10;// Definition of filter categories&#10;enum class TerrariumCategory(val displayName: String) {&#10;    ALL(&quot;Todo&quot;),&#10;    SENSORS(&quot;Sensores&quot;),&#10;    LIGHTS(&quot;Iluminación&quot;),&#10;    CLIMATE_WATER(&quot;Clima y Agua&quot;),&#10;    RAIN_SYSTEM(&quot;Sistema de Lluvia&quot;), // Nueva categoría&#10;    OTHER_SENSORS(&quot;Otros Sensores&quot;)&#10;}&#10;&#10;// This is the terrarium detail screen&#10;@OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class)&#10;@Composable&#10;fun TerrariumDetailScreen(&#10;    terrariumId: String,&#10;    onBackClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    viewModel: TerrariumDetailViewModel = hiltViewModel()&#10;) {&#10;    // Observe terrarium state from the ViewModel&#10;    val terrariumState by viewModel.terrariumState.collectAsState()&#10;    val sensorData by viewModel.sensorData.collectAsState()&#10;    val actuatorStates by viewModel.actuatorStates.collectAsState()&#10;    val isMqttConnected by viewModel.isMqttConnected.collectAsState()&#10;&#10;    // State for category filter&#10;    var selectedCategory by remember { mutableStateOf(TerrariumCategory.ALL) }&#10;&#10;    // --- Logic to handle real vs. mock data ---&#10;    // If terrariumState is null, it means no real terrarium has been loaded (or we are in preview/mock mode)&#10;    val useMockData = terrariumState == null &amp;&amp; terrariumId == &quot;placeholder_terrarium_id&quot;&#10;&#10;    val currentTerrarium = if (useMockData) createMockTerrarium(terrariumId) else terrariumState&#10;    val currentSensorData = if (useMockData) createMockSensorData() else sensorData&#10;    // We use a local mutable state for mock actuators so they respond to the UI&#10;    var mockActuatorStates by remember { mutableStateOf(createMockActuatorStates()) }&#10;    val currentActuatorStates = if (useMockData) mockActuatorStates else actuatorStates&#10;    val currentMqttConnected = if (useMockData) true else isMqttConnected // Assume connected in mock&#10;&#10;    // Calculate average temperature and humidity&#10;    // These variables are moved to a higher scope so they are accessible by the summary Card&#10;    val dhtTemperatures = currentSensorData.filterKeys { it.startsWith(&quot;dht22_&quot;) &amp;&amp; it.endsWith(&quot;_temperature&quot;) }&#10;        .mapNotNull { it.value.replace(&quot;°C&quot;, &quot;&quot;).toFloatOrNull() }&#10;    val dsTemperatures = currentSensorData.filterKeys { it.startsWith(&quot;ds18b20_&quot;) &amp;&amp; it.endsWith(&quot;_temperature&quot;) }&#10;        .mapNotNull { it.value.replace(&quot;°C&quot;, &quot;&quot;).toFloatOrNull() }&#10;    val allTemperatures = dhtTemperatures + dsTemperatures&#10;    val averageTemperature = if (allTemperatures.isNotEmpty()) {&#10;        String.format(Locale.getDefault(), &quot;%.1f°C&quot;, allTemperatures.average())&#10;    } else &quot;N/A&quot;&#10;&#10;    val dhtHumidities = currentSensorData.filterKeys { it.startsWith(&quot;dht22_&quot;) &amp;&amp; it.endsWith(&quot;_humidity&quot;) }&#10;        .mapNotNull { it.value.replace(&quot;%&quot;, &quot;&quot;).toFloatOrNull() }&#10;    val averageHumidity = if (dhtHumidities.isNotEmpty()) {&#10;        String.format(Locale.getDefault(), &quot;%.1f%%&quot;, dhtHumidities.average())&#10;    } else &quot;N/A&quot;&#10;&#10;    val mainTemperature = currentSensorData[&quot;dht22_1_temperature&quot;] ?: currentSensorData[&quot;ds18b20_1_temperature&quot;] ?: &quot;N/A&quot;&#10;    val lastUpdatedText = currentSensorData[&quot;lastUpdated&quot;] ?: &quot;N/A&quot;&#10;&#10;    // --- Logic for dynamic background (Day/Night) ---&#10;    var isDayTime by remember { mutableStateOf(isCurrentlyDayTime()) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        while (true) {&#10;            val now = LocalTime.now()&#10;            val nextMinuteStart = now.plusMinutes(1).truncatedTo(ChronoUnit.MINUTES)&#10;            val delayMillis = now.until(nextMinuteStart, ChronoUnit.MILLIS)&#10;            delay(delayMillis) // Wait until the start of the next minute&#10;            isDayTime = isCurrentlyDayTime()&#10;        }&#10;    }&#10;&#10;    // Background images (User needs to provide these in res/drawable)&#10;    val dayBackgroundImage = painterResource(id = R.drawable.jungle_background)&#10;    val nightBackgroundImage = painterResource(id = R.drawable.night_background_image)&#10;&#10;    val currentBackgroundImage = if (isDayTime) dayBackgroundImage else nightBackgroundImage&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    // Consider externalizing this string to strings.xml&#10;                    Text(&#10;                        text = &quot;Terrario: ${currentTerrarium?.name ?: terrariumId}&quot;,&#10;                        color = Color.Black // Changed text color to black&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        // Consider externalizing this description to strings.xml&#10;                        Icon(&#10;                            Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Volver atrás&quot;,&#10;                            tint = Color.Black // Changed icon tint to black&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* TODO: Implement more options if necessary */ }) {&#10;                        // Consider externalizing this description to strings.xml&#10;                        Icon(&#10;                            Icons.Default.Info,&#10;                            contentDescription = &quot;Más información&quot;,&#10;                            tint = Color.Black // Changed icon tint to black&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color.Transparent) // Transparent TopAppBar&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        val scrollState = rememberScrollState()&#10;        Box(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues) // Apply Scaffold padding here&#10;        ) {&#10;            // 1. Background Image (bottom layer)&#10;            Image(&#10;                painter = currentBackgroundImage,&#10;                contentDescription = &quot;Fondo del terrario&quot;, // Consider externalizing&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentScale = ContentScale.Crop // Scale to fill, cropping if necessary&#10;            )&#10;&#10;            // Removed the intermediate transparent Card as per user request&#10;&#10;            // 3. Existing functional cards (top layer) - this is the current Column content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState)&#10;                    .padding(horizontal = 16.dp, vertical = 8.dp), // Keep original padding for content&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Spacer(modifier = Modifier.height(8.dp)) // Top space&#10;&#10;                // Show a loading indicator only if we are NOT using mock data and the terrarium has not yet loaded&#10;                if (terrariumState == null &amp;&amp; !useMockData) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                        // Consider externalizing this string to strings.xml&#10;                        Text(&#10;                            text = &quot;Cargando datos del terrario...&quot;,&#10;                            modifier = Modifier.padding(top = 80.dp),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Main screen content, visible when terrarium is loaded or in mock mode&#10;                    AnimatedVisibility(&#10;                        visible = currentTerrarium != null, // Visible if currentTerrarium has data (real or mock)&#10;                        enter = fadeIn(animationSpec = tween(durationMillis = 500)),&#10;                        exit = fadeOut(animationSpec = tween(durationMillis = 500))&#10;                    ) {&#10;                        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                            // General Summary Card with terrarium photo&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp)&#10;                                    .animateContentSize(animationSpec = tween(durationMillis = 300)), // Size animation&#10;                                shape = RoundedCornerShape(24.dp), // Increased rounded corners&#10;                                elevation = CardDefaults.cardElevation(8.dp), // Higher elevation to make it stand out&#10;                                // Use a darker, transparent color for the primary container&#10;                                colors = CardDefaults.cardColors(containerColor = Color(0xFF4A5C70).copy(alpha = 0.8f)) // Darker, transparent blue-grey&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(20.dp) // More internal padding&#10;                                ) {&#10;                                    Row(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        horizontalArrangement = Arrangement.SpaceBetween&#10;                                    ) {&#10;                                        Column(modifier = Modifier.weight(1f)) {&#10;                                            // Consider externalizing this string to strings.xml&#10;                                            Text(&#10;                                                text = &quot;Gestión del Terrario&quot;,&#10;                                                style = MaterialTheme.typography.headlineSmall,&#10;                                                fontWeight = FontWeight.ExtraBold, // Bolder&#10;                                                color = Color.White // Text color white&#10;                                            )&#10;                                            Spacer(modifier = Modifier.height(6.dp)) // More space&#10;                                            // Consider externalizing this string to strings.xml&#10;                                            Text(&#10;                                                text = &quot;Monitorea y controla tu terrario en tiempo real.&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = Color.LightGray // Text color light gray&#10;                                            )&#10;                                        }&#10;                                        Spacer(modifier = Modifier.width(20.dp)) // More space&#10;                                        // Terrarium photo (ALWAYS FROM DRAWABLE)&#10;                                        Box(&#10;                                            modifier = Modifier&#10;                                                .size(120.dp) // Slightly larger size&#10;                                                .clip(RoundedCornerShape(24.dp)) // Ensures the image is clipped with rounded corners&#10;                                                .background(Color(0xFF81C784).copy(alpha = 0.2f)), // Subtle background that matches the theme&#10;                                            contentAlignment = Alignment.Center&#10;                                        ) {&#10;                                            // IMPORTANT: CHANGE 'R.drawable.ic_baseline_cloud_24' to your REAL terrarium image ID!&#10;                                            // This is a placeholder.&#10;                                            Image(&#10;                                                painter = painterResource(id = R.drawable.terrario), // &lt;-- Your image goes here!&#10;                                                contentDescription = &quot;Imagen del Terrario&quot;, // Consider externalizing&#10;                                                modifier = Modifier&#10;                                                    .fillMaxSize()&#10;                                                    .clip(RoundedCornerShape(24.dp)), // Clip image with rounded corners&#10;                                                contentScale = ContentScale.Crop // Scale to fill space&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                    Spacer(modifier = Modifier.height(20.dp)) // More space&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Icon(&#10;                                            imageVector = Icons.Default.Info, // Example icon, you can change it&#10;                                            contentDescription = &quot;Estado de conexión&quot;, // Consider externalizing&#10;                                            // Use theme colors for connection status&#10;                                            tint = if (currentMqttConnected) Color(0xFF4CAF50) else Color(0xFFD32F2F), // Green for connected, Red for disconnected&#10;                                            modifier = Modifier.size(28.dp) // Slightly larger icon&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(10.dp)) // More space&#10;                                        Text(&#10;                                            // Consider externalizing these strings to strings.xml&#10;                                            text = if (currentMqttConnected) &quot;Conectado al ESP32&quot; else &quot;Desconectado del ESP32&quot;,&#10;                                            style = MaterialTheme.typography.titleMedium, // More prominent text&#10;                                            fontWeight = FontWeight.SemiBold,&#10;                                            color = if (currentMqttConnected) Color(0xFF4CAF50) else Color(0xFFD32F2F)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Prominent Temperature and Humidity Section (Improved)&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp)&#10;                                    .animateContentSize(animationSpec = tween(durationMillis = 300)),&#10;                                shape = RoundedCornerShape(24.dp), // Increased rounded corners&#10;                                elevation = CardDefaults.cardElevation(4.dp), // Higher elevation&#10;                                colors = CardDefaults.cardColors(containerColor = Color(0xFF2D3A4B).copy(alpha = 0.7f)) // Darker, transparent blue-grey&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(20.dp) // More padding&#10;                                ) {&#10;                                    Row(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        horizontalArrangement = Arrangement.SpaceBetween&#10;                                    ) {&#10;                                        Column {&#10;                                            Text(&#10;                                                text = mainTemperature,&#10;                                                style = MaterialTheme.typography.displaySmall, // Larger text size&#10;                                                fontWeight = FontWeight.ExtraBold,&#10;                                                color = Color.White // Text color white&#10;                                            )&#10;                                            Text(&#10;                                                text = &quot;Temperatura Actual&quot;, // Consider externalizing&#10;                                                style = MaterialTheme.typography.bodyLarge, // Larger text&#10;                                                color = Color.LightGray // Text color light gray&#10;                                            )&#10;                                        }&#10;                                        Icon(&#10;                                            painter = getSensorIcon(&quot;temperature&quot;),&#10;                                            contentDescription = &quot;Temperatura&quot;, // Consider externalizing&#10;                                            tint = Color.White, // Icon color white&#10;                                            modifier = Modifier.size(64.dp) // Larger icon&#10;                                        )&#10;                                    }&#10;                                    Spacer(modifier = Modifier.height(16.dp)) // Space between main temperature and averages&#10;&#10;                                    Divider(modifier = Modifier.fillMaxWidth().padding(vertical = 8.dp), color = Color.White.copy(alpha = 0.3f)) // Separator with transparency&#10;&#10;                                    Row(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        horizontalArrangement = Arrangement.SpaceAround,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        // Average Humidity&#10;                                        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                            Icon(&#10;                                                painter = getSensorIcon(&quot;humidity&quot;),&#10;                                                contentDescription = &quot;Humedad Promedio&quot;, // Consider externalizing&#10;                                                tint = Color.White, // Icon color white&#10;                                                modifier = Modifier.size(40.dp)&#10;                                            )&#10;                                            Spacer(modifier = Modifier.height(4.dp))&#10;                                            Text(&#10;                                                text = averageHumidity,&#10;                                                style = MaterialTheme.typography.titleLarge,&#10;                                                fontWeight = FontWeight.Bold,&#10;                                                color = Color.White // Text color white&#10;                                            )&#10;                                            Text(&#10;                                                text = &quot;Hum. Promedio&quot;, // Consider externalizing&#10;                                                style = MaterialTheme.typography.bodySmall,&#10;                                                color = Color.LightGray // Text color light gray&#10;                                            )&#10;                                        }&#10;&#10;                                        // Average Temperature (if different from main, or as a second indicator)&#10;                                        // You could decide to show it only if it's significantly different from mainTemperature&#10;                                        // Or simply as a &quot;general average&quot; vs &quot;current&quot;&#10;                                        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                            Icon(&#10;                                                painter = getSensorIcon(&quot;temperature&quot;),&#10;                                                contentDescription = &quot;Temperatura Promedio&quot;, // Consider externalizing&#10;                                                tint = Color.White, // Icon color white&#10;                                                modifier = Modifier.size(40.dp)&#10;                                            )&#10;                                            Spacer(modifier = Modifier.height(4.dp))&#10;                                            Text(&#10;                                                text = averageTemperature,&#10;                                                style = MaterialTheme.typography.titleLarge,&#10;                                                fontWeight = FontWeight.Bold,&#10;                                                color = Color.White // Text color white&#10;                                            )&#10;                                            Text(&#10;                                                text = &quot;Temp. Promedio&quot;, // Consider externalizing&#10;                                                style = MaterialTheme.typography.bodySmall,&#10;                                                color = Color.LightGray // Text color light gray&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Last Updated Card (New addition for better visibility)&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp)&#10;                                    .animateContentSize(animationSpec = tween(durationMillis = 300)),&#10;                                shape = RoundedCornerShape(16.dp),&#10;                                elevation = CardDefaults.cardElevation(2.dp),&#10;                                colors = CardDefaults.cardColors(containerColor = Color(0xFF607D8B).copy(alpha = 0.6f)) // Lighter transparent blue-grey&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(12.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically,&#10;                                    horizontalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Icon(&#10;                                        painter = painterResource(id = R.drawable.outline_mode_fan_24), // Using a clock icon&#10;                                        contentDescription = &quot;Última Actualización&quot;,&#10;                                        tint = Color.White,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = &quot;Última Actualización: $lastUpdatedText&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = Color.White,&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;&#10;                            // Filter Section&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            // Consider externalizing this string to strings.xml&#10;                            Text(&#10;                                text = &quot;Filtrar por:&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = Color.White, // Text color white&#10;                                modifier = Modifier.align(Alignment.Start).padding(start = 4.dp, bottom = 4.dp)&#10;                            )&#10;                            FlowRow(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                TerrariumCategory.values().forEach { category -&gt;&#10;                                    CategoryFilterChip(&#10;                                        category = category,&#10;                                        selected = selectedCategory == category,&#10;                                        onClick = { selectedCategory = category }&#10;                                    )&#10;                                }&#10;                            }&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                            // --- Sensor Data Display (Refactored) ---&#10;                            // DHT22 Sensors Group&#10;                            AnimatedVisibility(&#10;                                visible = selectedCategory == TerrariumCategory.ALL || selectedCategory == TerrariumCategory.SENSORS || selectedCategory == TerrariumCategory.CLIMATE_WATER,&#10;                                enter = fadeIn(animationSpec = tween(durationMillis = 300)),&#10;                                exit = fadeOut(animationSpec = tween(durationMillis = 300))&#10;                            ) {&#10;                                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                    Text(&#10;                                        text = &quot;Temperatura Hambiente&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    // Cuadrícula 2x2 para los sensores DHT22&#10;                                    Column(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                    ) {&#10;                                        Row(&#10;                                            modifier = Modifier.fillMaxWidth(),&#10;                                            horizontalArrangement = Arrangement.SpaceEvenly&#10;                                        ) {&#10;                                            Dht22SensorGroupCard(sensorNumber = 1, sensorData = currentSensorData)&#10;                                            Dht22SensorGroupCard(sensorNumber = 2, sensorData = currentSensorData)&#10;                                        }&#10;                                        Row(&#10;                                            modifier = Modifier.fillMaxWidth(),&#10;                                            horizontalArrangement = Arrangement.SpaceEvenly&#10;                                        ) {&#10;                                            Dht22SensorGroupCard(sensorNumber = 3, sensorData = currentSensorData)&#10;                                            Dht22SensorGroupCard(sensorNumber = 4, sensorData = currentSensorData)&#10;                                        }&#10;                                    }&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;                                }&#10;                            }&#10;&#10;                            // DS18B20 Sensors Group y Otros Sensores&#10;                            AnimatedVisibility(&#10;                                visible = selectedCategory == TerrariumCategory.ALL || selectedCategory == TerrariumCategory.SENSORS || selectedCategory == TerrariumCategory.OTHER_SENSORS,&#10;                                enter = fadeIn(animationSpec = tween(durationMillis = 300)),&#10;                                exit = fadeOut(animationSpec = tween(durationMillis = 300))&#10;                            ) {&#10;                                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                    Text(&#10;                                        text = &quot;Temperatura del Suelo&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    Ds18b20SensorGroupCard(sensorData = currentSensorData)&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                                    Text(&#10;                                        text = &quot;Otros Sensores&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    OtherSensorsGroupCard(sensorData = currentSensorData)&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;                                }&#10;                            }&#10;&#10;                            // Actuator Controls&#10;                            AnimatedVisibility(&#10;                                visible = selectedCategory == TerrariumCategory.ALL || selectedCategory == TerrariumCategory.LIGHTS || selectedCategory == TerrariumCategory.CLIMATE_WATER,&#10;                                enter = fadeIn(animationSpec = tween(durationMillis = 300)),&#10;                                exit = fadeOut(animationSpec = tween(durationMillis = 300))&#10;                            ) {&#10;                                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                    Text(&#10;                                        text = &quot;Controles de Actuadores&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    // Cuadrícula de actuadores en 2 columnas&#10;                                    val actuatorList = currentActuatorStates&#10;                                        .filterKeys { it != &quot;water_pump_active&quot; }&#10;                                        .toList()&#10;                                    Column(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                    ) {&#10;                                        actuatorList.chunked(2).forEach { rowActuators -&gt;&#10;                                            Row(&#10;                                                modifier = Modifier.fillMaxWidth(),&#10;                                                horizontalArrangement = Arrangement.SpaceEvenly&#10;                                            ) {&#10;                                                rowActuators.forEach { (key, isActive) -&gt;&#10;                                                    ActuatorControlCard(&#10;                                                        actuatorKey = key,&#10;                                                        isActive = isActive,&#10;                                                        onToggle = { newState -&gt;&#10;                                                            if (useMockData) {&#10;                                                                mockActuatorStates = mockActuatorStates.toMutableMap().apply {&#10;                                                                    this[key] = newState&#10;                                                                }&#10;                                                            } else {&#10;                                                                currentTerrarium?.let { terrarium -&gt;&#10;                                                                    viewModel.toggleActuator(terrarium.id, key, newState)&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    )&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Nueva sección destacada para el dispensador de comida&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp)&#10;                                    .animateContentSize(animationSpec = tween(durationMillis = 300)),&#10;                                shape = RoundedCornerShape(24.dp),&#10;                                elevation = CardDefaults.cardElevation(8.dp),&#10;                                colors = CardDefaults.cardColors(containerColor = Color(0xFFFFC107).copy(alpha = 0.8f)) // Color amarillo para destacar&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(20.dp),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    FoodDispenserCard(&#10;                                        isActive = currentActuatorStates[&quot;food_dispenser_active&quot;] ?: false,&#10;                                        loads = currentSensorData[&quot;food_dispenser_loads&quot;]?.toIntOrNull() ?: 0,&#10;                                        onDispense = { newState -&gt;&#10;                                            if (useMockData) {&#10;                                                mockActuatorStates = mockActuatorStates.toMutableMap().apply {&#10;                                                    this[&quot;food_dispenser_active&quot;] = newState&#10;                                                }&#10;                                            } else {&#10;                                                currentTerrarium?.let { terrarium -&gt;&#10;                                                    viewModel.toggleActuator(terrarium.id, &quot;food_dispenser_active&quot;, newState)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Sistema de Lluvia (Rain System)&#10;                            AnimatedVisibility(&#10;                                visible = selectedCategory == TerrariumCategory.ALL || selectedCategory == TerrariumCategory.RAIN_SYSTEM,&#10;                                enter = fadeIn(animationSpec = tween(durationMillis = 300)),&#10;                                exit = fadeOut(animationSpec = tween(durationMillis = 300))&#10;                            ) {&#10;                                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                    Text(&#10;                                        text = &quot;Sistema de Lluvia&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    RainSystemCard(&#10;                                        isActive = currentActuatorStates[&quot;water_pump_active&quot;] ?: false,&#10;                                        waterDistance = currentSensorData[&quot;hc_sr04_1_distance&quot;]?.replace(&quot; cm&quot;, &quot;&quot;)?.toFloatOrNull(),&#10;                                        onToggle = { newState -&gt;&#10;                                            if (useMockData) {&#10;                                                mockActuatorStates = mockActuatorStates.toMutableMap().apply {&#10;                                                    this[&quot;water_pump_active&quot;] = newState&#10;                                                }&#10;                                            } else {&#10;                                                currentTerrarium?.let { terrarium -&gt;&#10;                                                    viewModel.toggleActuator(terrarium.id, &quot;water_pump_active&quot;, newState)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;// Mejoras en los filtros: iconos y colores por categoría&#10;@Composable&#10;fun CategoryFilterChip(&#10;    category: TerrariumCategory,&#10;    selected: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val icon: Painter = when (category) {&#10;        TerrariumCategory.ALL -&gt; painterResource(id = R.drawable.ic_baseline_cloud_24)&#10;        TerrariumCategory.SENSORS -&gt; painterResource(id = R.drawable.ic_baseline_thermostat_24)&#10;        TerrariumCategory.LIGHTS -&gt; painterResource(id = R.drawable.baseline_lightbulb_24)&#10;        TerrariumCategory.CLIMATE_WATER -&gt; painterResource(id = R.drawable.ic_outline_water_pump_24)&#10;        TerrariumCategory.RAIN_SYSTEM -&gt; painterResource(id = R.drawable.ic_outline_water_pump_24) // Usa el mismo ícono o uno diferente si tienes&#10;        TerrariumCategory.OTHER_SENSORS -&gt; painterResource(id = R.drawable.ic_outline_settings_power_24)&#10;    }&#10;    val chipColor = when (category) {&#10;        TerrariumCategory.ALL -&gt; Color(0xFF607D8B)&#10;        TerrariumCategory.SENSORS -&gt; Color(0xFF90CAF9)&#10;        TerrariumCategory.LIGHTS -&gt; Color(0xFFFFF176)&#10;        TerrariumCategory.CLIMATE_WATER -&gt; Color(0xFF80DEEA)&#10;        TerrariumCategory.RAIN_SYSTEM -&gt; Color(0xFF4FC3F7) // Azul para el sistema de lluvia&#10;        TerrariumCategory.OTHER_SENSORS -&gt; Color(0xFFA5D6A7)&#10;    }&#10;&#10;    // Animaciones para el borde y sombra&#10;    val borderWidth by animateDpAsState(targetValue = if (selected) 3.dp else 1.dp)&#10;    val borderColor by animateColorAsState(targetValue = if (selected) chipColor else chipColor.copy(alpha = 0.5f))&#10;    val shadowElevation by animateDpAsState(targetValue = if (selected) 8.dp else 0.dp)&#10;    val backgroundColor by animateColorAsState(targetValue = if (selected) chipColor.copy(alpha = 0.95f) else chipColor.copy(alpha = 0.7f))&#10;&#10;    FilterChip(&#10;        selected = selected,&#10;        onClick = onClick,&#10;        label = {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Icon(painter = icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(category.displayName, color = Color.White)&#10;            }&#10;        },&#10;        modifier = Modifier&#10;            .shadow(shadowElevation, RoundedCornerShape(50))&#10;            .border(borderWidth, borderColor, RoundedCornerShape(50)),&#10;        colors = FilterChipDefaults.filterChipColors(&#10;            selectedContainerColor = backgroundColor,&#10;            selectedLabelColor = Color.White,&#10;            containerColor = backgroundColor,&#10;            labelColor = Color.White&#10;        ),&#10;        border = null // El borde se maneja por el modifier&#10;    )&#10;}&#10;&#10;&#10;// Helper function to get health color based on value and type&#10;@Composable&#10;fun getHealthColor(value: Float?, sensorType: String): Color {&#10;    if (value == null) return Color.LightGray.copy(alpha = 0.6f) // For N/A values&#10;&#10;    return when (sensorType) {&#10;        &quot;temperature&quot; -&gt; {&#10;            when {&#10;                value &lt; 20.0f -&gt; Color(0xFFADD8E6) // Light Blue (Cold)&#10;                value &gt; 30.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Hot)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        &quot;humidity&quot; -&gt; {&#10;            when {&#10;                value &lt; 50.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Dry)&#10;                value &gt; 80.0f -&gt; Color(0xFFADD8E6) // Light Blue (Humid)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        &quot;distance&quot; -&gt; {&#10;            when {&#10;                value &lt; 10.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Too close)&#10;                value &gt; 50.0f -&gt; Color(0xFFADD8E6) // Light Blue (Too far)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        &quot;power&quot; -&gt; {&#10;            when {&#10;                value &gt; 100.0f -&gt; Color(0xFFFFA07A) // Light Salmon (High power)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        else -&gt; Color.White // Default&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun getSensorIcon(sensorType: String): Painter {&#10;    return when (sensorType) {&#10;        &quot;temperature&quot; -&gt; painterResource(id = R.drawable.ic_baseline_thermostat_24) // Placeholder, replace with actual icon&#10;        &quot;humidity&quot; -&gt; painterResource(id = R.drawable.ic_outline_humidity_high_24) // Placeholder, replace with actual icon&#10;        &quot;distance&quot; -&gt; painterResource(id = R.drawable.ic_outline_distance_24) // Placeholder, replace with actual icon&#10;        &quot;power&quot; -&gt; painterResource(id = R.drawable.ic_outline_settings_power_24) // Placeholder, replace with actual icon&#10;        else -&gt; painterResource(id = R.drawable.ic_baseline_cloud_24) // Generic placeholder&#10;    }&#10;}&#10;&#10;// Helper function to determine if it's day or night (adjust hours as needed)&#10;fun isCurrentlyDayTime(): Boolean {&#10;    val currentHour = LocalTime.now().hour&#10;    return currentHour in 6..19 // Between 6 AM and 7 PM&#10;}&#10;&#10;// --- Mock Data for Previews ---&#10;fun createMockTerrarium(id: String): Terrarium {&#10;    return Terrarium(&#10;        id = id,&#10;        name = &quot;Terrario de Prueba&quot;,&#10;        description = &quot;Este es un terrario de prueba para desarrollo de UI.&quot;,&#10;        dht22_1_temperature = 25.0f,&#10;        dht22_1_humidity = 70.0f,&#10;        dht22_2_temperature = 26.5f,&#10;        dht22_2_humidity = 65.0f,&#10;        dht22_3_temperature = 19.0f, // Example of low temp&#10;        dht22_3_humidity = 85.0f, // Example of high humidity&#10;        dht22_4_temperature = 32.0f, // Example of high temp&#10;        dht22_4_humidity = 45.0f, // Example of low humidity&#10;        ds18b20_1_temperature = 23.0f,&#10;        ds18b20_2_temperature = 22.5f,&#10;        ds18b20_3_temperature = 24.5f,&#10;        ds18b20_4_temperature = 23.8f,&#10;        ds18b20_5_temperature = 22.0f,&#10;        hc_sr04_1_distance = 5.0f, // Example of low distance&#10;        pzem_1_power = 120.0f, // Example of high power&#10;        // All actuators OFF at start for mock&#10;        waterPumpActive = false,&#10;        fan1Active = false,&#10;        fan2Active = false,&#10;        light1Active = false,&#10;        light2Active = false,&#10;        light3Active = false,&#10;        heatPlate1Active = false,&#10;        lastUpdated = System.currentTimeMillis()&#10;    )&#10;}&#10;&#10;fun createMockSensorData(): Map&lt;String, String&gt; {&#10;    return mapOf(&#10;        &quot;dht22_1_temperature&quot; to &quot;25.0°C&quot;,&#10;        &quot;dht22_1_humidity&quot; to &quot;70.0%&quot;,&#10;        &quot;dht22_2_temperature&quot; to &quot;26.5°C&quot;,&#10;        &quot;dht22_2_humidity&quot; to &quot;65.0%&quot;,&#10;        &quot;dht22_3_temperature&quot; to &quot;19.0°C&quot;, // Example of low temp&#10;        &quot;dht22_3_humidity&quot; to &quot;85.0%&quot;, // Example of high humidity&#10;        &quot;dht22_4_temperature&quot; to &quot;32.0°C&quot;, // Example of high temp&#10;        &quot;dht22_4_humidity&quot; to &quot;45.0%&quot;, // Example of low humidity&#10;        &quot;ds18b20_1_temperature&quot; to &quot;23.0°C&quot;,&#10;        &quot;ds18b20_2_temperature&quot; to &quot;22.5°C&quot;,&#10;        &quot;ds18b20_3_temperature&quot; to &quot;24.5°C&quot;,&#10;        &quot;ds18b20_4_temperature&quot; to &quot;23.8°C&quot;,&#10;        &quot;ds18b20_5_temperature&quot; to &quot;22.0°C&quot;,&#10;        &quot;hc_sr04_1_distance&quot; to &quot;5.0 cm&quot;, // Example of low distance&#10;        &quot;pzem_1_power&quot; to &quot;120.0 W&quot;, // Example of high power&#10;        &quot;lastUpdated&quot; to &quot;Hace 1 minuto&quot; // More descriptive mock timestamp&#10;    )&#10;}&#10;&#10;fun createMockActuatorStates(): Map&lt;String, Boolean&gt; {&#10;    // All actuators OFF at start for mock&#10;    return mapOf(&#10;        &quot;water_pump_active&quot; to false,&#10;        &quot;fan1_active&quot; to false,&#10;        &quot;fan2_active&quot; to false,&#10;        &quot;light1_active&quot; to false,&#10;        &quot;light2_active&quot; to false,&#10;        &quot;light3_active&quot; to false,&#10;        &quot;heat_plate1_active&quot; to false&#10;    )&#10;}&#10;&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun TerrariumDetailScreenPreview() {&#10;    ReptiTrackTheme {&#10;        // Use a test terrarium ID to activate mock mode in the Preview&#10;        TerrariumDetailScreen(terrariumId = &quot;placeholder_terrarium_id&quot;, onBackClick = {})&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.waldoz_x.reptitrack.ui.screens.terrariumdetail&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.waldoz_x.reptitrack.ui.theme.ReptiTrackTheme&#10;import com.waldoz_x.reptitrack.domain.model.Terrarium&#10;import java.util.Locale&#10;import java.time.LocalTime // Import LocalTime&#10;import java.time.temporal.ChronoUnit // Import ChronoUnit&#10;import kotlinx.coroutines.delay // Import delay for LaunchedEffect&#10;import androidx.compose.runtime.LaunchedEffect // Import LaunchedEffect&#10;&#10;// Imports for using Painter and painterResource&#10;import androidx.compose.ui.graphics.painter.Painter&#10;import androidx.compose.ui.res.painterResource&#10;import com.waldoz_x.reptitrack.R // Make sure to import your R class to access drawables&#10;&#10;// Import for loading images asynchronously (Coil) - Not directly used for background images now, but kept for future use if needed&#10;import coil.compose.AsyncImage&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.layout.ExperimentalLayoutApi&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.foundation.BorderStroke // Import BorderStroke&#10;import androidx.compose.animation.animateColorAsState // Import animateColorAsState&#10;import androidx.compose.foundation.Canvas // Import Canvas for drawing circles&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.animation.core.animateDpAsState&#10;import androidx.compose.foundation.border&#10;import androidx.compose.ui.draw.shadow&#10;import com.waldoz_x.reptitrack.ui.components.Dht22SensorGroupCard&#10;import com.waldoz_x.reptitrack.ui.components.Ds18b20SensorGroupCard&#10;import com.waldoz_x.reptitrack.ui.components.OtherSensorsGroupCard&#10;import com.waldoz_x.reptitrack.ui.components.ActuatorControlCard&#10;import com.waldoz_x.reptitrack.ui.components.FoodDispenserCard&#10;import com.waldoz_x.reptitrack.ui.components.RainSystemCard&#10;&#10;// Definition of filter categories&#10;enum class TerrariumCategory(val displayName: String) {&#10;    ALL(&quot;Todo&quot;),&#10;    SENSORS(&quot;Sensores&quot;),&#10;    LIGHTS(&quot;Iluminación&quot;),&#10;    CLIMATE_WATER(&quot;Clima y Agua&quot;),&#10;    RAIN_SYSTEM(&quot;Sistema de Lluvia&quot;), // Nueva categoría&#10;    OTHER_SENSORS(&quot;Otros Sensores&quot;)&#10;}&#10;&#10;// This is the terrarium detail screen&#10;@OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class)&#10;@Composable&#10;fun TerrariumDetailScreen(&#10;    terrariumId: String,&#10;    onBackClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    viewModel: TerrariumDetailViewModel = hiltViewModel()&#10;) {&#10;    // Observe terrarium state from the ViewModel&#10;    val terrariumState by viewModel.terrariumState.collectAsState()&#10;    val sensorData by viewModel.sensorData.collectAsState()&#10;    val actuatorStates by viewModel.actuatorStates.collectAsState()&#10;    val isMqttConnected by viewModel.isMqttConnected.collectAsState()&#10;&#10;    // State for category filter&#10;    var selectedCategory by remember { mutableStateOf(TerrariumCategory.ALL) }&#10;&#10;    // --- Logic to handle real vs. mock data ---&#10;    // If terrariumState is null, it means no real terrarium has been loaded (or we are in preview/mock mode)&#10;    val useMockData = terrariumState == null &amp;&amp; terrariumId == &quot;placeholder_terrarium_id&quot;&#10;&#10;    val currentTerrarium = if (useMockData) createMockTerrarium(terrariumId) else terrariumState&#10;    val currentSensorData = if (useMockData) createMockSensorData() else sensorData&#10;    // We use a local mutable state for mock actuators so they respond to the UI&#10;    var mockActuatorStates by remember { mutableStateOf(createMockActuatorStates()) }&#10;    val currentActuatorStates = if (useMockData) mockActuatorStates else actuatorStates&#10;    val currentMqttConnected = if (useMockData) true else isMqttConnected // Assume connected in mock&#10;&#10;    // Calculate average temperature and humidity&#10;    // These variables are moved to a higher scope so they are accessible by the summary Card&#10;    val dhtTemperatures = currentSensorData.filterKeys { it.startsWith(&quot;dht22_&quot;) &amp;&amp; it.endsWith(&quot;_temperature&quot;) }&#10;        .mapNotNull { it.value.replace(&quot;°C&quot;, &quot;&quot;).toFloatOrNull() }&#10;    val dsTemperatures = currentSensorData.filterKeys { it.startsWith(&quot;ds18b20_&quot;) &amp;&amp; it.endsWith(&quot;_temperature&quot;) }&#10;        .mapNotNull { it.value.replace(&quot;°C&quot;, &quot;&quot;).toFloatOrNull() }&#10;    val allTemperatures = dhtTemperatures + dsTemperatures&#10;    val averageTemperature = if (allTemperatures.isNotEmpty()) {&#10;        String.format(Locale.getDefault(), &quot;%.1f°C&quot;, allTemperatures.average())&#10;    } else &quot;N/A&quot;&#10;&#10;    val dhtHumidities = currentSensorData.filterKeys { it.startsWith(&quot;dht22_&quot;) &amp;&amp; it.endsWith(&quot;_humidity&quot;) }&#10;        .mapNotNull { it.value.replace(&quot;%&quot;, &quot;&quot;).toFloatOrNull() }&#10;    val averageHumidity = if (dhtHumidities.isNotEmpty()) {&#10;        String.format(Locale.getDefault(), &quot;%.1f%%&quot;, dhtHumidities.average())&#10;    } else &quot;N/A&quot;&#10;&#10;    val mainTemperature = currentSensorData[&quot;dht22_1_temperature&quot;] ?: currentSensorData[&quot;ds18b20_1_temperature&quot;] ?: &quot;N/A&quot;&#10;    val lastUpdatedText = currentSensorData[&quot;lastUpdated&quot;] ?: &quot;N/A&quot;&#10;&#10;    // --- Logic for dynamic background (Day/Night) ---&#10;    var isDayTime by remember { mutableStateOf(isCurrentlyDayTime()) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        while (true) {&#10;            val now = LocalTime.now()&#10;            val nextMinuteStart = now.plusMinutes(1).truncatedTo(ChronoUnit.MINUTES)&#10;            val delayMillis = now.until(nextMinuteStart, ChronoUnit.MILLIS)&#10;            delay(delayMillis) // Wait until the start of the next minute&#10;            isDayTime = isCurrentlyDayTime()&#10;        }&#10;    }&#10;&#10;    // Background images (User needs to provide these in res/drawable)&#10;    val dayBackgroundImage = painterResource(id = R.drawable.jungle_background)&#10;    val nightBackgroundImage = painterResource(id = R.drawable.night_background_image)&#10;&#10;    val currentBackgroundImage = if (isDayTime) dayBackgroundImage else nightBackgroundImage&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    // Consider externalizing this string to strings.xml&#10;                    Text(&#10;                        text = &quot;Terrario: ${currentTerrarium?.name ?: terrariumId}&quot;,&#10;                        color = Color.Black // Changed text color to black&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        // Consider externalizing this description to strings.xml&#10;                        Icon(&#10;                            Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Volver atrás&quot;,&#10;                            tint = Color.Black // Changed icon tint to black&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* TODO: Implement more options if necessary */ }) {&#10;                        // Consider externalizing this description to strings.xml&#10;                        Icon(&#10;                            Icons.Default.Info,&#10;                            contentDescription = &quot;Más información&quot;,&#10;                            tint = Color.Black // Changed icon tint to black&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color.Transparent) // Transparent TopAppBar&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        val scrollState = rememberScrollState()&#10;        Box(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues) // Apply Scaffold padding here&#10;        ) {&#10;            // 1. Background Image (bottom layer)&#10;            Image(&#10;                painter = currentBackgroundImage,&#10;                contentDescription = &quot;Fondo del terrario&quot;, // Consider externalizing&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentScale = ContentScale.Crop // Scale to fill, cropping if necessary&#10;            )&#10;&#10;            // Removed the intermediate transparent Card as per user request&#10;&#10;            // 3. Existing functional cards (top layer) - this is the current Column content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(scrollState)&#10;                    .padding(horizontal = 16.dp, vertical = 8.dp), // Keep original padding for content&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Spacer(modifier = Modifier.height(8.dp)) // Top space&#10;&#10;                // Show a loading indicator only if we are NOT using mock data and the terrarium has not yet loaded&#10;                if (terrariumState == null &amp;&amp; !useMockData) {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                        // Consider externalizing this string to strings.xml&#10;                        Text(&#10;                            text = &quot;Cargando datos del terrario...&quot;,&#10;                            modifier = Modifier.padding(top = 80.dp),&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Main screen content, visible when terrarium is loaded or in mock mode&#10;                    AnimatedVisibility(&#10;                        visible = currentTerrarium != null, // Visible if currentTerrarium has data (real or mock)&#10;                        enter = fadeIn(animationSpec = tween(durationMillis = 500)),&#10;                        exit = fadeOut(animationSpec = tween(durationMillis = 500))&#10;                    ) {&#10;                        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                            // General Summary Card with terrarium photo&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp)&#10;                                    .animateContentSize(animationSpec = tween(durationMillis = 300)), // Size animation&#10;                                shape = RoundedCornerShape(24.dp), // Increased rounded corners&#10;                                elevation = CardDefaults.cardElevation(8.dp), // Higher elevation to make it stand out&#10;                                // Use a darker, transparent color for the primary container&#10;                                colors = CardDefaults.cardColors(containerColor = Color(0xFF4A5C70).copy(alpha = 0.8f)) // Darker, transparent blue-grey&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(20.dp) // More internal padding&#10;                                ) {&#10;                                    Row(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        horizontalArrangement = Arrangement.SpaceBetween&#10;                                    ) {&#10;                                        Column(modifier = Modifier.weight(1f)) {&#10;                                            // Consider externalizing this string to strings.xml&#10;                                            Text(&#10;                                                text = &quot;Gestión del Terrario&quot;,&#10;                                                style = MaterialTheme.typography.headlineSmall,&#10;                                                fontWeight = FontWeight.ExtraBold, // Bolder&#10;                                                color = Color.White // Text color white&#10;                                            )&#10;                                            Spacer(modifier = Modifier.height(6.dp)) // More space&#10;                                            // Consider externalizing this string to strings.xml&#10;                                            Text(&#10;                                                text = &quot;Monitorea y controla tu terrario en tiempo real.&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = Color.LightGray // Text color light gray&#10;                                            )&#10;                                        }&#10;                                        Spacer(modifier = Modifier.width(20.dp)) // More space&#10;                                        // Terrarium photo (ALWAYS FROM DRAWABLE)&#10;                                        Box(&#10;                                            modifier = Modifier&#10;                                                .size(120.dp) // Slightly larger size&#10;                                                .clip(RoundedCornerShape(24.dp)) // Ensures the image is clipped with rounded corners&#10;                                                .background(Color(0xFF81C784).copy(alpha = 0.2f)), // Subtle background that matches the theme&#10;                                            contentAlignment = Alignment.Center&#10;                                        ) {&#10;                                            // IMPORTANT: CHANGE 'R.drawable.ic_baseline_cloud_24' to your REAL terrarium image ID!&#10;                                            // This is a placeholder.&#10;                                            Image(&#10;                                                painter = painterResource(id = R.drawable.terrario), // &lt;-- Your image goes here!&#10;                                                contentDescription = &quot;Imagen del Terrario&quot;, // Consider externalizing&#10;                                                modifier = Modifier&#10;                                                    .fillMaxSize()&#10;                                                    .clip(RoundedCornerShape(24.dp)), // Clip image with rounded corners&#10;                                                contentScale = ContentScale.Crop // Scale to fill space&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                    Spacer(modifier = Modifier.height(20.dp)) // More space&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Icon(&#10;                                            imageVector = Icons.Default.Info, // Example icon, you can change it&#10;                                            contentDescription = &quot;Estado de conexión&quot;, // Consider externalizing&#10;                                            // Use theme colors for connection status&#10;                                            tint = if (currentMqttConnected) Color(0xFF4CAF50) else Color(0xFFD32F2F), // Green for connected, Red for disconnected&#10;                                            modifier = Modifier.size(28.dp) // Slightly larger icon&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(10.dp)) // More space&#10;                                        Text(&#10;                                            // Consider externalizing these strings to strings.xml&#10;                                            text = if (currentMqttConnected) &quot;Conectado al ESP32&quot; else &quot;Desconectado del ESP32&quot;,&#10;                                            style = MaterialTheme.typography.titleMedium, // More prominent text&#10;                                            fontWeight = FontWeight.SemiBold,&#10;                                            color = if (currentMqttConnected) Color(0xFF4CAF50) else Color(0xFFD32F2F)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Prominent Temperature and Humidity Section (Improved)&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp)&#10;                                    .animateContentSize(animationSpec = tween(durationMillis = 300)),&#10;                                shape = RoundedCornerShape(24.dp), // Increased rounded corners&#10;                                elevation = CardDefaults.cardElevation(4.dp), // Higher elevation&#10;                                colors = CardDefaults.cardColors(containerColor = Color(0xFF2D3A4B).copy(alpha = 0.7f)) // Darker, transparent blue-grey&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(20.dp) // More padding&#10;                                ) {&#10;                                    Row(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        horizontalArrangement = Arrangement.SpaceBetween&#10;                                    ) {&#10;                                        Column {&#10;                                            Text(&#10;                                                text = mainTemperature,&#10;                                                style = MaterialTheme.typography.displaySmall, // Larger text size&#10;                                                fontWeight = FontWeight.ExtraBold,&#10;                                                color = Color.White // Text color white&#10;                                            )&#10;                                            Text(&#10;                                                text = &quot;Temperatura Actual&quot;, // Consider externalizing&#10;                                                style = MaterialTheme.typography.bodyLarge, // Larger text&#10;                                                color = Color.LightGray // Text color light gray&#10;                                            )&#10;                                        }&#10;                                        Icon(&#10;                                            painter = getSensorIcon(&quot;temperature&quot;),&#10;                                            contentDescription = &quot;Temperatura&quot;, // Consider externalizing&#10;                                            tint = Color.White, // Icon color white&#10;                                            modifier = Modifier.size(64.dp) // Larger icon&#10;                                        )&#10;                                    }&#10;                                    Spacer(modifier = Modifier.height(16.dp)) // Space between main temperature and averages&#10;&#10;                                    Divider(modifier = Modifier.fillMaxWidth().padding(vertical = 8.dp), color = Color.White.copy(alpha = 0.3f)) // Separator with transparency&#10;&#10;                                    Row(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        horizontalArrangement = Arrangement.SpaceAround,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        // Average Humidity&#10;                                        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                            Icon(&#10;                                                painter = getSensorIcon(&quot;humidity&quot;),&#10;                                                contentDescription = &quot;Humedad Promedio&quot;, // Consider externalizing&#10;                                                tint = Color.White, // Icon color white&#10;                                                modifier = Modifier.size(40.dp)&#10;                                            )&#10;                                            Spacer(modifier = Modifier.height(4.dp))&#10;                                            Text(&#10;                                                text = averageHumidity,&#10;                                                style = MaterialTheme.typography.titleLarge,&#10;                                                fontWeight = FontWeight.Bold,&#10;                                                color = Color.White // Text color white&#10;                                            )&#10;                                            Text(&#10;                                                text = &quot;Hum. Promedio&quot;, // Consider externalizing&#10;                                                style = MaterialTheme.typography.bodySmall,&#10;                                                color = Color.LightGray // Text color light gray&#10;                                            )&#10;                                        }&#10;&#10;                                        // Average Temperature (if different from main, or as a second indicator)&#10;                                        // You could decide to show it only if it's significantly different from mainTemperature&#10;                                        // Or simply as a &quot;general average&quot; vs &quot;current&quot;&#10;                                        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                            Icon(&#10;                                                painter = getSensorIcon(&quot;temperature&quot;),&#10;                                                contentDescription = &quot;Temperatura Promedio&quot;, // Consider externalizing&#10;                                                tint = Color.White, // Icon color white&#10;                                                modifier = Modifier.size(40.dp)&#10;                                            )&#10;                                            Spacer(modifier = Modifier.height(4.dp))&#10;                                            Text(&#10;                                                text = averageTemperature,&#10;                                                style = MaterialTheme.typography.titleLarge,&#10;                                                fontWeight = FontWeight.Bold,&#10;                                                color = Color.White // Text color white&#10;                                            )&#10;                                            Text(&#10;                                                text = &quot;Temp. Promedio&quot;, // Consider externalizing&#10;                                                style = MaterialTheme.typography.bodySmall,&#10;                                                color = Color.LightGray // Text color light gray&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Last Updated Card (New addition for better visibility)&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp)&#10;                                    .animateContentSize(animationSpec = tween(durationMillis = 300)),&#10;                                shape = RoundedCornerShape(16.dp),&#10;                                elevation = CardDefaults.cardElevation(2.dp),&#10;                                colors = CardDefaults.cardColors(containerColor = Color(0xFF607D8B).copy(alpha = 0.6f)) // Lighter transparent blue-grey&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(12.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically,&#10;                                    horizontalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Icon(&#10;                                        painter = painterResource(id = R.drawable.outline_mode_fan_24), // Using a clock icon&#10;                                        contentDescription = &quot;Última Actualización&quot;,&#10;                                        tint = Color.White,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = &quot;Última Actualización: $lastUpdatedText&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = Color.White,&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;&#10;                            // Filter Section&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            // Consider externalizing this string to strings.xml&#10;                            Text(&#10;                                text = &quot;Filtrar por:&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = Color.White, // Text color white&#10;                                modifier = Modifier.align(Alignment.Start).padding(start = 4.dp, bottom = 4.dp)&#10;                            )&#10;                            FlowRow(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                TerrariumCategory.values().forEach { category -&gt;&#10;                                    CategoryFilterChip(&#10;                                        category = category,&#10;                                        selected = selectedCategory == category,&#10;                                        onClick = { selectedCategory = category }&#10;                                    )&#10;                                }&#10;                            }&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                            // --- Sensor Data Display (Refactored) ---&#10;                            // DHT22 Sensors Group&#10;                            AnimatedVisibility(&#10;                                visible = selectedCategory == TerrariumCategory.ALL || selectedCategory == TerrariumCategory.SENSORS || selectedCategory == TerrariumCategory.CLIMATE_WATER,&#10;                                enter = fadeIn(animationSpec = tween(durationMillis = 300)),&#10;                                exit = fadeOut(animationSpec = tween(durationMillis = 300))&#10;                            ) {&#10;                                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                    Text(&#10;                                        text = &quot;Temperatura Hambiente&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    // Cuadrícula 2x2 para los sensores DHT22&#10;                                    Column(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                    ) {&#10;                                        Row(&#10;                                            modifier = Modifier.fillMaxWidth(),&#10;                                            horizontalArrangement = Arrangement.SpaceEvenly&#10;                                        ) {&#10;                                            Dht22SensorGroupCard(sensorNumber = 1, sensorData = currentSensorData)&#10;                                            Dht22SensorGroupCard(sensorNumber = 2, sensorData = currentSensorData)&#10;                                        }&#10;                                        Row(&#10;                                            modifier = Modifier.fillMaxWidth(),&#10;                                            horizontalArrangement = Arrangement.SpaceEvenly&#10;                                        ) {&#10;                                            Dht22SensorGroupCard(sensorNumber = 3, sensorData = currentSensorData)&#10;                                            Dht22SensorGroupCard(sensorNumber = 4, sensorData = currentSensorData)&#10;                                        }&#10;                                    }&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;                                }&#10;                            }&#10;&#10;                            // DS18B20 Sensors Group y Otros Sensores&#10;                            AnimatedVisibility(&#10;                                visible = selectedCategory == TerrariumCategory.ALL || selectedCategory == TerrariumCategory.SENSORS || selectedCategory == TerrariumCategory.OTHER_SENSORS,&#10;                                enter = fadeIn(animationSpec = tween(durationMillis = 300)),&#10;                                exit = fadeOut(animationSpec = tween(durationMillis = 300))&#10;                            ) {&#10;                                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                    Text(&#10;                                        text = &quot;Temperatura del Suelo&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    Ds18b20SensorGroupCard(sensorData = currentSensorData)&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                                    Text(&#10;                                        text = &quot;Otros Sensores&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    OtherSensorsGroupCard(sensorData = currentSensorData)&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;                                }&#10;                            }&#10;&#10;                            // Actuator Controls&#10;                            AnimatedVisibility(&#10;                                visible = selectedCategory == TerrariumCategory.ALL || selectedCategory == TerrariumCategory.LIGHTS || selectedCategory == TerrariumCategory.CLIMATE_WATER,&#10;                                enter = fadeIn(animationSpec = tween(durationMillis = 300)),&#10;                                exit = fadeOut(animationSpec = tween(durationMillis = 300))&#10;                            ) {&#10;                                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                    Text(&#10;                                        text = &quot;Controles de Actuadores&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    // Cuadrícula de actuadores en 2 columnas&#10;                                    val actuatorList = currentActuatorStates&#10;                                        .filterKeys { it != &quot;water_pump_active&quot; }&#10;                                        .toList()&#10;                                    Column(&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                    ) {&#10;                                        actuatorList.chunked(2).forEach { rowActuators -&gt;&#10;                                            Row(&#10;                                                modifier = Modifier.fillMaxWidth(),&#10;                                                horizontalArrangement = Arrangement.SpaceEvenly&#10;                                            ) {&#10;                                                rowActuators.forEach { (key, isActive) -&gt;&#10;                                                    ActuatorControlCard(&#10;                                                        actuatorKey = key,&#10;                                                        isActive = isActive,&#10;                                                        onToggle = { newState -&gt;&#10;                                                            if (useMockData) {&#10;                                                                mockActuatorStates = mockActuatorStates.toMutableMap().apply {&#10;                                                                    this[key] = newState&#10;                                                                }&#10;                                                            } else {&#10;                                                                currentTerrarium?.let { terrarium -&gt;&#10;                                                                    viewModel.toggleActuator(terrarium.id, key, newState)&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    )&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Nueva sección destacada para el dispensador de comida&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp)&#10;                                    .animateContentSize(animationSpec = tween(durationMillis = 300)),&#10;                                shape = RoundedCornerShape(24.dp),&#10;                                elevation = CardDefaults.cardElevation(8.dp),&#10;                                colors = CardDefaults.cardColors(containerColor = Color(0xFFFFC107).copy(alpha = 0.8f)) // Color amarillo para destacar&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(20.dp),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    FoodDispenserCard(&#10;                                        isActive = currentActuatorStates[&quot;food_dispenser_active&quot;] ?: false,&#10;                                        loads = currentSensorData[&quot;food_dispenser_loads&quot;]?.toIntOrNull() ?: 0,&#10;                                        onDispense = { newState -&gt;&#10;                                            if (useMockData) {&#10;                                                mockActuatorStates = mockActuatorStates.toMutableMap().apply {&#10;                                                    this[&quot;food_dispenser_active&quot;] = newState&#10;                                                }&#10;                                            } else {&#10;                                                currentTerrarium?.let { terrarium -&gt;&#10;                                                    viewModel.toggleActuator(terrarium.id, &quot;food_dispenser_active&quot;, newState)&#10;                                                }&#10;                                            }&#10;                                        },&#10;                                        onRecharge = {&#10;                                            // Aquí puedes poner la lógica para recargar el dispensador.&#10;                                            // Por ejemplo, podrías mostrar un diálogo, enviar un comando, etc.&#10;                                            // Si no tienes lógica aún, puedes dejarlo vacío.&#10;                                        }&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Sistema de Lluvia (Rain System)&#10;                            AnimatedVisibility(&#10;                                visible = selectedCategory == TerrariumCategory.ALL || selectedCategory == TerrariumCategory.RAIN_SYSTEM,&#10;                                enter = fadeIn(animationSpec = tween(durationMillis = 300)),&#10;                                exit = fadeOut(animationSpec = tween(durationMillis = 300))&#10;                            ) {&#10;                                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                    Text(&#10;                                        text = &quot;Sistema de Lluvia&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White,&#10;                                        modifier = Modifier.padding(vertical = 8.dp)&#10;                                    )&#10;                                    RainSystemCard(&#10;                                        isActive = currentActuatorStates[&quot;water_pump_active&quot;] ?: false,&#10;                                        waterDistance = currentSensorData[&quot;hc_sr04_1_distance&quot;]?.replace(&quot; cm&quot;, &quot;&quot;)?.toFloatOrNull(),&#10;                                        onToggle = { newState -&gt;&#10;                                            if (useMockData) {&#10;                                                mockActuatorStates = mockActuatorStates.toMutableMap().apply {&#10;                                                    this[&quot;water_pump_active&quot;] = newState&#10;                                                }&#10;                                            } else {&#10;                                                currentTerrarium?.let { terrarium -&gt;&#10;                                                    viewModel.toggleActuator(terrarium.id, &quot;water_pump_active&quot;, newState)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(16.dp))&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;// Mejoras en los filtros: iconos y colores por categoría&#10;@Composable&#10;fun CategoryFilterChip(&#10;    category: TerrariumCategory,&#10;    selected: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val icon: Painter = when (category) {&#10;        TerrariumCategory.ALL -&gt; painterResource(id = R.drawable.ic_baseline_cloud_24)&#10;        TerrariumCategory.SENSORS -&gt; painterResource(id = R.drawable.ic_baseline_thermostat_24)&#10;        TerrariumCategory.LIGHTS -&gt; painterResource(id = R.drawable.baseline_lightbulb_24)&#10;        TerrariumCategory.CLIMATE_WATER -&gt; painterResource(id = R.drawable.ic_outline_water_pump_24)&#10;        TerrariumCategory.RAIN_SYSTEM -&gt; painterResource(id = R.drawable.ic_outline_water_pump_24) // Usa el mismo ícono o uno diferente si tienes&#10;        TerrariumCategory.OTHER_SENSORS -&gt; painterResource(id = R.drawable.ic_outline_settings_power_24)&#10;    }&#10;    val chipColor = when (category) {&#10;        TerrariumCategory.ALL -&gt; Color(0xFF607D8B)&#10;        TerrariumCategory.SENSORS -&gt; Color(0xFF90CAF9)&#10;        TerrariumCategory.LIGHTS -&gt; Color(0xFFFFF176)&#10;        TerrariumCategory.CLIMATE_WATER -&gt; Color(0xFF80DEEA)&#10;        TerrariumCategory.RAIN_SYSTEM -&gt; Color(0xFF4FC3F7) // Azul para el sistema de lluvia&#10;        TerrariumCategory.OTHER_SENSORS -&gt; Color(0xFFA5D6A7)&#10;    }&#10;&#10;    // Animaciones para el borde y sombra&#10;    val borderWidth by animateDpAsState(targetValue = if (selected) 3.dp else 1.dp)&#10;    val borderColor by animateColorAsState(targetValue = if (selected) chipColor else chipColor.copy(alpha = 0.5f))&#10;    val shadowElevation by animateDpAsState(targetValue = if (selected) 8.dp else 0.dp)&#10;    val backgroundColor by animateColorAsState(targetValue = if (selected) chipColor.copy(alpha = 0.95f) else chipColor.copy(alpha = 0.7f))&#10;&#10;    FilterChip(&#10;        selected = selected,&#10;        onClick = onClick,&#10;        label = {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Icon(painter = icon, contentDescription = null, tint = Color.White, modifier = Modifier.size(18.dp))&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(category.displayName, color = Color.White)&#10;            }&#10;        },&#10;        modifier = Modifier&#10;            .shadow(shadowElevation, RoundedCornerShape(50))&#10;            .border(borderWidth, borderColor, RoundedCornerShape(50)),&#10;        colors = FilterChipDefaults.filterChipColors(&#10;            selectedContainerColor = backgroundColor,&#10;            selectedLabelColor = Color.White,&#10;            containerColor = backgroundColor,&#10;            labelColor = Color.White&#10;        ),&#10;        border = null // El borde se maneja por el modifier&#10;    )&#10;}&#10;&#10;&#10;// Helper function to get health color based on value and type&#10;@Composable&#10;fun getHealthColor(value: Float?, sensorType: String): Color {&#10;    if (value == null) return Color.LightGray.copy(alpha = 0.6f) // For N/A values&#10;&#10;    return when (sensorType) {&#10;        &quot;temperature&quot; -&gt; {&#10;            when {&#10;                value &lt; 20.0f -&gt; Color(0xFFADD8E6) // Light Blue (Cold)&#10;                value &gt; 30.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Hot)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        &quot;humidity&quot; -&gt; {&#10;            when {&#10;                value &lt; 50.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Dry)&#10;                value &gt; 80.0f -&gt; Color(0xFFADD8E6) // Light Blue (Humid)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        &quot;distance&quot; -&gt; {&#10;            when {&#10;                value &lt; 10.0f -&gt; Color(0xFFFFA07A) // Light Salmon (Too close)&#10;                value &gt; 50.0f -&gt; Color(0xFFADD8E6) // Light Blue (Too far)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        &quot;power&quot; -&gt; {&#10;            when {&#10;                value &gt; 100.0f -&gt; Color(0xFFFFA07A) // Light Salmon (High power)&#10;                else -&gt; Color(0xFF90EE90) // Light Green (Normal)&#10;            }&#10;        }&#10;        else -&gt; Color.White // Default&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun getSensorIcon(sensorType: String): Painter {&#10;    return when (sensorType) {&#10;        &quot;temperature&quot; -&gt; painterResource(id = R.drawable.ic_baseline_thermostat_24) // Placeholder, replace with actual icon&#10;        &quot;humidity&quot; -&gt; painterResource(id = R.drawable.ic_outline_humidity_high_24) // Placeholder, replace with actual icon&#10;        &quot;distance&quot; -&gt; painterResource(id = R.drawable.ic_outline_distance_24) // Placeholder, replace with actual icon&#10;        &quot;power&quot; -&gt; painterResource(id = R.drawable.ic_outline_settings_power_24) // Placeholder, replace with actual icon&#10;        else -&gt; painterResource(id = R.drawable.ic_baseline_cloud_24) // Generic placeholder&#10;    }&#10;}&#10;&#10;// Helper function to determine if it's day or night (adjust hours as needed)&#10;fun isCurrentlyDayTime(): Boolean {&#10;    val currentHour = LocalTime.now().hour&#10;    return currentHour in 6..19 // Between 6 AM and 7 PM&#10;}&#10;&#10;// --- Mock Data for Previews ---&#10;fun createMockTerrarium(id: String): Terrarium {&#10;    return Terrarium(&#10;        id = id,&#10;        name = &quot;Terrario de Prueba&quot;,&#10;        description = &quot;Este es un terrario de prueba para desarrollo de UI.&quot;,&#10;        dht22_1_temperature = 25.0f,&#10;        dht22_1_humidity = 70.0f,&#10;        dht22_2_temperature = 26.5f,&#10;        dht22_2_humidity = 65.0f,&#10;        dht22_3_temperature = 19.0f, // Example of low temp&#10;        dht22_3_humidity = 85.0f, // Example of high humidity&#10;        dht22_4_temperature = 32.0f, // Example of high temp&#10;        dht22_4_humidity = 45.0f, // Example of low humidity&#10;        ds18b20_1_temperature = 23.0f,&#10;        ds18b20_2_temperature = 22.5f,&#10;        ds18b20_3_temperature = 24.5f,&#10;        ds18b20_4_temperature = 23.8f,&#10;        ds18b20_5_temperature = 22.0f,&#10;        hc_sr04_1_distance = 5.0f, // Example of low distance&#10;        pzem_1_power = 120.0f, // Example of high power&#10;        // All actuators OFF at start for mock&#10;        waterPumpActive = false,&#10;        fan1Active = false,&#10;        fan2Active = false,&#10;        light1Active = false,&#10;        light2Active = false,&#10;        light3Active = false,&#10;        heatPlate1Active = false,&#10;        lastUpdated = System.currentTimeMillis()&#10;    )&#10;}&#10;&#10;fun createMockSensorData(): Map&lt;String, String&gt; {&#10;    return mapOf(&#10;        &quot;dht22_1_temperature&quot; to &quot;25.0°C&quot;,&#10;        &quot;dht22_1_humidity&quot; to &quot;70.0%&quot;,&#10;        &quot;dht22_2_temperature&quot; to &quot;26.5°C&quot;,&#10;        &quot;dht22_2_humidity&quot; to &quot;65.0%&quot;,&#10;        &quot;dht22_3_temperature&quot; to &quot;19.0°C&quot;, // Example of low temp&#10;        &quot;dht22_3_humidity&quot; to &quot;85.0%&quot;, // Example of high humidity&#10;        &quot;dht22_4_temperature&quot; to &quot;32.0°C&quot;, // Example of high temp&#10;        &quot;dht22_4_humidity&quot; to &quot;45.0%&quot;, // Example of low humidity&#10;        &quot;ds18b20_1_temperature&quot; to &quot;23.0°C&quot;,&#10;        &quot;ds18b20_2_temperature&quot; to &quot;22.5°C&quot;,&#10;        &quot;ds18b20_3_temperature&quot; to &quot;24.5°C&quot;,&#10;        &quot;ds18b20_4_temperature&quot; to &quot;23.8°C&quot;,&#10;        &quot;ds18b20_5_temperature&quot; to &quot;22.0°C&quot;,&#10;        &quot;hc_sr04_1_distance&quot; to &quot;5.0 cm&quot;, // Example of low distance&#10;        &quot;pzem_1_power&quot; to &quot;120.0 W&quot;, // Example of high power&#10;        &quot;lastUpdated&quot; to &quot;Hace 1 minuto&quot; // More descriptive mock timestamp&#10;    )&#10;}&#10;&#10;fun createMockActuatorStates(): Map&lt;String, Boolean&gt; {&#10;    // All actuators OFF at start for mock&#10;    return mapOf(&#10;        &quot;water_pump_active&quot; to false,&#10;        &quot;fan1_active&quot; to false,&#10;        &quot;fan2_active&quot; to false,&#10;        &quot;light1_active&quot; to false,&#10;        &quot;light2_active&quot; to false,&#10;        &quot;light3_active&quot; to false,&#10;        &quot;heat_plate1_active&quot; to false&#10;    )&#10;}&#10;&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun TerrariumDetailScreenPreview() {&#10;    ReptiTrackTheme {&#10;        // Use a test terrarium ID to activate mock mode in the Preview&#10;        TerrariumDetailScreen(terrariumId = &quot;placeholder_terrarium_id&quot;, onBackClick = {})&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>